generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id       Int      @id @default(autoincrement())
  fullName String
  email    String   @unique
  password String
  role     UserRole @default(USER)

  orders    Order[]
  cart      Cart?
  cartItems CartItem[]

  provider   String?
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Int
  imageUrl    String

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  smartphoneCharacteristics SmartphoneCharacteristic[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CharacteristicCategory {
  id               Int                   @id @default(autoincrement())
  name             String                @unique
  characteristics  SmartphoneCharacteristic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmartphoneCharacteristic {
  id             Int    @id @default(autoincrement())
  smartphoneId   Int
  characteristic String
  value          String

  smartphone Product @relation(fields: [smartphoneId], references: [id], onDelete: Cascade)
  categoryId Int
  category   CharacteristicCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique

  token String

  totalAmount Float      @default(0)
  items       CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?

  token String

  items       Json?
  status      OrderStatus @default(PENDING)
  totalAmount Float
  paymentId   String?

  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}